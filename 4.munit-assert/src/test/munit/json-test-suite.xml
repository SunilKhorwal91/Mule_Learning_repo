<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="4.munit-assert-test-suite.xml" />
	<munit:test name="payloadJSONExpectedSuccessTestSuccess" doc:id="dff86660-e9cd-44ff-88d3-ee81257e519f" description="Test">
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="0196d857-0d4b-4dc2-b29a-6b4fc7e1caa3" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - Payload is Expected" doc:id="22b75008-3d27-4580-82a5-ef76d024d0e0" is="#[MunitTools::equalTo(readUrl('classpath://payloadResponse.json','application/json'))]" expression="#[%dw 2.0&#10;&#10;&#10;output application/json&#10;---&#10;payload]" message='#["The response payload is incorrect"]'/>
		</munit:validation>
	</munit:test>
	<munit:test name="categoryMatchesSuccessTestCase" doc:id="1d67074f-10eb-4f68-aa12-cec8c6bd3e77" >
		<munit:behavior >
			<set-variable value="#[['obsteric', 'breast pain', 'dermatology', 'gynaecology']as Array]" doc:name="Set Variable - medical Categories" doc:id="e3455413-c113-44db-8535-f56a7628349b" variableName="medicalCategories"/>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="e3fa8a69-6b68-44de-9eb5-dac843c3a167" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert expression - medical category exists" doc:id="c68eb3c4-d9bc-4c7b-a296-4c1c8d3098d8" message='#["The Medical category in the payload does not exist"]'>
				<munit-tools:that ><![CDATA[#[import * from dw::test::Asserts 
 ---
payload.Category must beOneOf(vars.medicalCategories)]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="feeValueSuccessTestCase" doc:id="2b3dce6f-b03d-48ad-81c0-437c814bfc23" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="e19cb6d4-3718-42df-b4d0-8bbbea2d53f1" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - Fee exists and it is greater than or equal to 100" doc:id="621f91e2-ae68-4c96-a851-d54d08664de2" is="#[MunitTools::greaterThan(100)]" message='#["The medical fee is not valid"]' expression="#[payload.fee]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="payoadMediaTypeSuccessTestCase" doc:id="16aa3b53-90d9-45a2-b287-d172d5b93375" >
		<munit:execution >
			<flow-ref doc:name="Flow-ref to getJSONObject" doc:id="f21439a4-fb35-4d36-a6fc-cc524290f1ad" name="getJSONObject"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that - Payload media type is JSON" doc:id="3688f4d8-ab5e-4f13-9cb3-969fa4a52983" message='#["The media type of the response payload is incorrect"]' expression="#[payload]" is="#[MunitTools::withMediaType('application/json')]"/>
		</munit:validation>
	</munit:test>


</mule>
